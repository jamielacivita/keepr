ToDos
=====
[ ] Users register and login - roughly done
[ ] Users automatically login on page refresh (how to do?)
    if no user in store - direct to login page.

[ ] Users can create and manage their keeps
[ ] Users can see all public keeps.
[ ] Users can create vaults to store their keeps
[ ] Should be able to display public keeper elements without logging in?
[ ] Need forgot password functionality?
[ ] Where do you go if you click "I'll signe up later, just browsing for now."
OQ: What form elements are needed for regristration?

--------------------------------------------------------------------------------------------------------
OQ: What is the workflow process for regristration?
1. User navigates to regristration page.
2. User fills out regristration form.
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true, dropDups: true },
    password: { type: String, required: true }
3. User submits the form (prevent default)
    <button type="submit" name="action" @click.prevent="logIn(admin.email, pWord)">Submit</button>
4. A coponent local method is run to create a user object from the form and then run a method in the store.

<form>
    name: <input v-model="name" placeholder="name"><br>
    email: <input v-model="email" placeholder="e-mail"><br>
    password: <input v-model="password" placeholder="password"><br>
  <input type="submit">
</form>




5. In the store the method makes an axios post (to the base URL) is made to submit the body to the database. 

ToDo : need to to in-form validation.
ToDo : need to handle error condition 11000 (duplicate key in DB - happens when user submits same information twice.)

5. User is taken to the login page to actually sign in.
    [] display a message indicating that regristration was successful ... delay ... to login page.

OQ: What happens if you try to register as an existing user but with a different password?

OQ: How do we verify the user is logged in with full privlages?
------------------------------------------------------------------------------------------------------------


What are we using axios for? (Need to review how this works, exactly.)

OQ: How do we delete users?




=======================================
Goal: Users can see all public keeps.
=======================================
Connecting to Database via command line
---------------------------------------
At terminal: 
mongo ds056789.mlab.com:56789/codeworks -u student -p CodeWorksStudent
> use codeworks // switches db.to codeworks database.
db.users.find() --> produces a list of users.
db.keeps.find() --> produces a list of keeps.
db.vaults.find() --> produces a list of vaults.
show collections --> gives a list of collections.

======================
Server Working Diagram
======================
program starts with index.js 
that gets the sever listening.
the server is created in dev-server.js
    the request is logged.
    the middleware stack is traversed.
If the route is / or /api is a split.
if you go the /api route you hit the router in models/index.js
this gets the route information from config.constants

Pulling keep items by id:
-------------------------
Example: localhost:3000/api/keeps/58d93db0836d16377666288f

========================================
Goal: Ability to Post Keeps with postman
========================================

localhost:3000/api/keeps
------------------------
{
"title": "Kryptos.",
"imgUrl" : "https://upload.wikimedia.org/wikipedia/commons/e/e0/Kryptos_sculptor.jpg",
"description": "A mystery test object. JWTO.",
"body":"A mystery: Kryptos is a sculpture by the American artist Jim Sanborn that is located on the grounds of the Central Intelligence Agency (CIA) in Langley, Virginia. Since its dedication on November 3, 1990, there has been much speculation about the meaning of the four encrypted messages it bears. Of the four messages, the first three have been solved, while the fourth message remains as one of the most famous unsolved codes in the world.",
"public": true,
"viewCount": 0,
"shareCount": 0,
"keepCount": 0
}

========================================
Goal: Ability to Read Keeps with postman
========================================
localhost:3000/api/keeps/58d986bbaad25612ac73a0a1

=====================================================
Goal: Ability to create a hardcoded post on www side.
=====================================================
1. Need a create page. (create the page in components).
1.5 : update router x2.
2. Need a button on that page 
3. Button needs a local method
4. Local method need remote api call. 


=====================================================
Goal: Ability to pull public keeps into the store.
=====================================================
Done.


















